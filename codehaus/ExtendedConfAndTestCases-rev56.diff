Index: pom.xml
===================================================================
--- pom.xml	(revision 12166)
+++ pom.xml	(working copy)
@@ -19,9 +19,7 @@
   <prerequisites>
     <maven>2.0</maven>
   </prerequisites>
-  <description>
-    This plugin executes the Macker architectural rule checking utility against a project's compiled Java code.
-  </description>
+  <description>This plugin executes the Macker architectural rule checking utility against a project's compiled Java code.</description>
   <issueManagement>
     <system>JIRA</system>
     <url>http://jira.codehaus.org/browse/MOJO</url>
@@ -60,15 +58,37 @@
       <roles>
         <role>Macker Creator</role>
       </roles>
-      <timezone/>
+      <timezone />
     </contributor>
     <contributor>
       <name>Remy Sanlaville</name>
       <email>remy.sanlaville@gmail.com</email>
-      <url/>
+      <url />
       <organization />
-      <roles/>
-      <timezone/>
+      <roles />
+      <timezone />
+    </contributor>
+    <contributor>
+      <name>Peter Kofler</name>
+      <email>peter dot kofler at code-cop dot org</email>
+      <url>http://www.code-cop.org</url>
+      <organization>Code Cop</organization>
+      <roles>
+        <role>Java Developer</role>
+      </roles>
+      <timezone>+1</timezone>
+    </contributor>
+    <contributor>
+      <name>dkulp</name>
+      <roles>
+        <role>Maven PMD Plugin Developer</role>
+      </roles>
+    </contributor>
+    <contributor>
+      <name>Benjamin Bentmann</name>
+      <roles>
+        <role>Maven PMD Plugin Developer</role>
+      </roles>
     </contributor>
   </contributors>
   <licenses>
@@ -82,7 +102,7 @@
     <dependency>
       <groupId>org.apache.maven</groupId>
       <artifactId>maven-plugin-api</artifactId>
-      <version>2.2.1</version>
+      <version>2.0.6</version>
     </dependency>
     <dependency>
       <groupId>org.apache.maven.reporting</groupId>
@@ -100,11 +120,16 @@
       <artifactId>plexus-utils</artifactId>
       <version>2.0.1</version>
     </dependency>
-	<dependency>
-	    <groupId>innig</groupId>
-	    <artifactId>macker</artifactId>
-	    <version>0.4.2</version>
-	</dependency>
+    <dependency>
+      <groupId>org.codehaus.plexus</groupId>
+      <artifactId>plexus-resources</artifactId>
+      <version>1.0-alpha-7</version>
+    </dependency>
+    <dependency>
+      <groupId>innig</groupId>
+      <artifactId>macker</artifactId>
+      <version>0.4.2</version>
+    </dependency>
     <dependency>
       <groupId>innig</groupId>
       <artifactId>innig-util</artifactId>
@@ -113,33 +138,33 @@
     <dependency>
       <groupId>org.apache.bcel</groupId>
       <artifactId>bcel</artifactId>
-      <version>5.2</version>
+      <version>5.2</version> 
     </dependency>
     <dependency>
       <groupId>commons-lang</groupId>
       <artifactId>commons-lang</artifactId>
       <version>2.3</version>
-    </dependency> 
+    </dependency>
     <dependency>
       <groupId>jakarta-regexp</groupId>
       <artifactId>jakarta-regexp</artifactId>
       <version>1.4</version>
-    </dependency> 
+    </dependency>
     <dependency>
       <groupId>javax.xml.parsers</groupId>
       <artifactId>jaxp-api</artifactId>
       <version>1.4</version>
-    </dependency> 
+    </dependency>
     <dependency>
       <groupId>jdom</groupId>
       <artifactId>jdom</artifactId>
       <version>1.0b8</version>
-    </dependency> 
+    </dependency>
     <dependency>
       <groupId>xalan</groupId>
       <artifactId>xalan</artifactId>
-      <version>2.7.0</version>
-    </dependency> 
+      <version>2.5.1</version>
+    </dependency>
     <dependency>
       <groupId>xerces</groupId>
       <artifactId>xercesImpl</artifactId>
@@ -150,12 +175,41 @@
       <artifactId>xmlParserAPIs</artifactId>
       <version>2.6.2</version>
     </dependency>
+    <dependency>
+      <groupId>org.apache.maven.shared</groupId>
+      <artifactId>maven-plugin-testing-harness</artifactId>
+      <version>1.1</version>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>xmlunit</groupId>
+      <artifactId>xmlunit</artifactId>
+      <version>1.3</version>
+      <scope>test</scope>
+    </dependency>
   </dependencies>
   <build>
     <plugins>
       <plugin>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <configuration>
+          <source>1.4</source>
+          <target>1.4</target>
+          <compilerArguments>
+            <encoding>UTF-8</encoding>
+          </compilerArguments>
+        </configuration>
+      </plugin>
+      <plugin>
+        <artifactId>maven-resources-plugin</artifactId>
+        <configuration>
+          <encoding>UTF-8</encoding>
+        </configuration>
+      </plugin>
+      <plugin>
         <groupId>org.apache.maven.plugins</groupId>
         <artifactId>maven-docck-plugin</artifactId>
+        <version>1.0</version>
         <!--executions>
           <execution>
             <goals>
@@ -172,7 +226,7 @@
         <groupId>org.codehaus.mojo</groupId>
         <artifactId>findbugs-maven-plugin</artifactId>
         <version>1.1.1</version>
-        <configuration/>
+        <configuration />
       </plugin>
     </plugins>
   </reporting>
Index: src/main/java/org/codehaus/mojo/macker/MackerMojo.java
===================================================================
--- src/main/java/org/codehaus/mojo/macker/MackerMojo.java	(revision 12166)
+++ src/main/java/org/codehaus/mojo/macker/MackerMojo.java	(working copy)
@@ -16,29 +16,41 @@
  * limitations under the License.
  */
 
-import org.apache.maven.project.MavenProject;
 import org.apache.maven.plugin.AbstractMojo;
 import org.apache.maven.plugin.MojoExecutionException;
+import org.apache.maven.plugin.MojoFailureException;
+import org.apache.maven.project.MavenProject;
 
 import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashMap;
 import java.util.Iterator;
+import java.util.LinkedHashSet;
+import java.util.LinkedList;
+import java.util.List;
 import java.util.Map;
-import java.util.HashMap;
-import java.io.IOException;
 
+import org.codehaus.plexus.resource.ResourceManager;
+import org.codehaus.plexus.resource.loader.FileResourceCreationException;
+import org.codehaus.plexus.resource.loader.FileResourceLoader;
+import org.codehaus.plexus.resource.loader.ResourceNotFoundException;
 import org.codehaus.plexus.util.FileUtils;
+import org.codehaus.plexus.util.StringUtils;
+
 import net.innig.macker.Macker;
-import net.innig.macker.rule.RuleSeverity;
-import net.innig.macker.rule.RulesException;
 import net.innig.macker.event.ListenerException;
 import net.innig.macker.event.MackerIsMadException;
+import net.innig.macker.rule.RuleSeverity;
+import net.innig.macker.rule.RulesException;
 import net.innig.macker.structure.ClassParseException;
 
 /**
  * Runs Macker against the compiled classes of the project.
- * 
+ *
  * @goal macker
- * @description Executes Macker against the classes.
  * @execute phase="compile"
  * @requiresDependencyResolution compile
  * @requiresProject
@@ -50,7 +62,7 @@
 {
     /**
      * Directory containing the class files for Macker to analyze.
-     * 
+     *
      * @parameter expression="${project.build.outputDirectory}"
      * @required
      * @readonly
@@ -58,8 +70,42 @@
     private File classesDirectory;
 
     /**
+     * The directories containing the test-classes to be analyzed.
+     *
+     * @parameter expression="${project.build.testOutputDirectory}"
+     * @required
+     * @readonly
+     */
+    private File testClassesDirectory;
+
+    /**
+     * A list of files to exclude from checking. Can contain Ant-style wildcards and double wildcards. Note that these
+     * exclusion patterns only operate on the path of a source file relative to its source root directory. In other
+     * words, files are excluded based on their package and/or class name. If you want to exclude entire root
+     * directories, use the parameter <code>excludeRoots</code> instead.
+     *
+     * @parameter
+     */
+    private String[] excludes;
+
+    /**
+     * A list of files to include from checking. Can contain Ant-style wildcards and double wildcards.
+     * Defaults to **\/*.class.
+     *
+     * @parameter
+     */
+    private String[] includes;
+
+    /**
+     * Run Macker on the tests.
+     *
+     * @parameter default-value="false"
+     */
+    private boolean includeTests;
+
+    /**
      * Directory containing the rules files for Macker.
-     * 
+     *
      * @parameter expression="${basedir}/src/main/config"
      * @required
      */
@@ -67,7 +113,7 @@
 
     /**
      * Directory where the Macker output file will be generated.
-     * 
+     *
      * @parameter default-value="${project.build.directory}"
      * @required
      */
@@ -75,7 +121,7 @@
 
     /**
      * Name of the Macker output file.
-     * 
+     *
      * @parameter expression="${outputName}" default-value="macker-out.xml"
      * @required
      */
@@ -83,63 +129,78 @@
 
     /**
      * Print max messages.
-     * 
+     *
      * @parameter expression="${maxmsg}" default-value="0"
      */
     private int maxmsg;
 
     /**
      * Print threshold. Valid options are error, warning, info, and debug.
-     * 
+     *
      * @parameter expression="${print}"
      */
     private String print;
 
     /**
      * Anger threshold. Valid options are error, warning, info, and debug.
-     * 
+     *
      * @parameter expression="${anger}"
      */
     private String anger;
 
     /**
      * Name of the Macker rules file.
-     * 
+     *
      * @parameter expression="${rule}" default-value="macker-rules.xml"
      */
     private String rule;
 
     /**
      * Name of the Macker rules files.
-     * 
+     *
      * @parameter expression="${rules}"
      */
     private String[] rules;
 
     /**
+     * @component
+     * @required
+     * @readonly
+     */
+    private ResourceManager locator;
+
+    /**
      * Variables map that will be passed to Macker.
-     * 
+     *
      * @parameter expression="${variables}"
      */
-    private Map variables = new HashMap();
+    private Map/*<String, String>*/ variables = new HashMap/*<String, String>*/();
 
     /**
      * Verbose setting for Macker tool execution.
-     * 
+     *
      * @parameter expression="${verbose}" default-value="false"
      */
     private boolean verbose;
 
     /**
      * Fail the build on an error.
-     * 
+     *
      * @parameter default-value="true"
      */
     private boolean failOnError;
 
     /**
+     * Skip the checks.  Most useful on the command line
+     * via "-Dmacker.skip=true".
+     *
+     * @parameter expression="${macker.skip}" default-value="false"
+     */
+    private boolean skip;
+
+    /**
      * <i>Maven Internal</i>: Project to interact with.
-     * 
+     *
      * @parameter expression="${project}"
      * @required
      * @readonly
@@ -147,28 +208,71 @@
     private MavenProject project;
 
     /**
-     * @throws MojoExecutionException
+     * @throws MojoExecutionException if a error occurs during Macker execution
+     * @throws MojoFailureException if Macker detects a failure.
      * @see org.apache.maven.plugin.Mojo#execute()
      */
     public void execute()
-        throws MojoExecutionException
+        throws MojoExecutionException, MojoFailureException
     {
+        //configure ResourceManager
+        locator.addSearchPath( FileResourceLoader.ID, project.getFile().getParentFile().getAbsolutePath() );
+        locator.addSearchPath( "url", "" );
+        locator.setOutputDirectory( new File( project.getBuild().getDirectory() ) );
+
+        if ( skip )
+        {
+            return;
+        }
+
         // check if rules were specified
-        if ( ( null == rules ) || ( 0 == rules.length ) )
+        if ( null == rules || 0 == rules.length )
         {
+            if ( null == rule )
+            {
+                throw new MojoExecutionException( "Error during Macker execution: no rule file defined" );
+            }
             rules = new String[1];
             rules[0] = rule;
         }
+        if ( classesDirectory == null || !classesDirectory.isDirectory() )
+        {
+            throw new MojoExecutionException( "Error during Macker execution: " + classesDirectory.getAbsolutePath() + " is not a directory" );
+        }
+        if ( includeTests && (testClassesDirectory == null || !testClassesDirectory.isDirectory()) )
+        {
+            throw new MojoExecutionException( "Error during Macker execution: " + testClassesDirectory.getAbsolutePath() + " is not a directory" );
+        }
+        if ( rulesDirectory != null && !rulesDirectory.isDirectory() )
+        {
+            throw new MojoExecutionException( "Error during Macker execution: " + rulesDirectory.getAbsolutePath() + " is not a directory" );
+        }
 
-        // check if there are class files to analyze 
-        String files[] = FileUtils.getFilesFromExtension( classesDirectory.getPath(), new String[] { "class" } );
-        if ( ( files == null ) || ( files.length == 0 ) )
+        // check if there are class files to analyze
+        List/*<File>*/files;
+        try
+        {
+            files = getFilesToProcess();
+        }
+        catch ( IOException e )
+        {
+            throw new MojoExecutionException( "Error during Macker execution: error in file selection", e );
+        }
+        if ( files == null || files.size() == 0 )
         {
             // no class file, we can't do anything
             getLog().info( "No class files in specified directory " + classesDirectory );
         }
         else
         {
+            if ( !outputDirectory.exists() )
+            {
+                if ( !outputDirectory.mkdirs() )
+                {
+                    throw new MojoExecutionException( "Error during Macker execution: Could not create directory " + outputDirectory.getAbsolutePath() );
+                }
+            }
+
             // let's go!
             File outputFile = new File( outputDirectory, outputName );
             launchMacker( outputFile, files );
@@ -177,13 +281,14 @@
 
     /**
      * Executes Macker as requested.
-     * 
+     *
      * @param outputFile the result file that will should produced by macker
      * @param files classes files that should be analysed
      * @throws MojoExecutionException if a error occurs during Macker execution
+     * @throws MojoFailureException if Macker detects a failure.
      */
-    private void launchMacker( File outputFile, String[] files )
-        throws MojoExecutionException
+    private void launchMacker( File outputFile, List/*<File>*/ files )
+        throws MojoExecutionException, MojoFailureException
     {
         try
         {
@@ -201,7 +306,7 @@
             getLog().warn( "Macker has detected violations. Please refer to the XML report for more information." );
             if ( failOnError )
             {
-                throw new MojoExecutionException( "MackerIsMadException during Macker execution.", ex );
+                throw new MojoFailureException( "MackerIsMadException during Macker execution: " + ex.getMessage() );
             }
         }
         catch ( RulesException ex )
@@ -224,31 +329,31 @@
 
     /**
      * Tell Macker where to look for Class files to analyze.
-     * 
+     *
      * @param files the ".class" files to analyze
      * @param macker the Macker instance
      * @throws IOException if there's a problem reading a file
      * @throws ClassParseException if there's a problem parsing a class
      */
-    private void specifyClassFilesToAnalyse( String[] files, Macker macker )
+    private void specifyClassFilesToAnalyse( List/*<File>*/ files, Macker macker )
         throws IOException, ClassParseException
     {
-        for ( int i = 0; i < files.length; i++ )
+        for ( Iterator/*<File>*/ i = files.iterator(); i.hasNext(); )
         {
-            macker.addClass( new File( files[i] ) );
+            macker.addClass( (File) i.next() );
         }
     }
 
     /**
      * If specific variables are set in the POM, give them to Macker.
-     * 
+     *
      * @param macker the Macker isntance
      */
     private void initMackerVariables( Macker macker )
     {
-        if ( ( variables != null ) && ( variables.size() > 0 ) )
+        if ( variables != null && variables.size() > 0 )
         {
-            Iterator it = variables.keySet().iterator();
+            Iterator/*<String>*/ it = variables.keySet().iterator();
             while ( it.hasNext() )
             {
                 String key = (String) it.next();
@@ -259,26 +364,72 @@
 
     /**
      * Configure Macker with the rule files specified in the POM.
-     * 
+     *
      * @param macker the Macker instance
      * @throws IOException if there's a problem reading a file
      * @throws RulesException if there's a problem parsing a rule file
+     * @throws MojoExecutionException if a error occurs during Macker execution
      */
     private void configureRules( Macker macker )
-        throws IOException, RulesException
+        throws IOException, RulesException, MojoExecutionException
     {
-        File ruleFile = null;
-        for ( int i = 0; i < rules.length; i++ )
+        try
+        {
+            for ( int i = 0; i < rules.length; i++ )
+            {
+                String set = rules[i];
+                File ruleFile = new File( rulesDirectory, set );
+                if ( ruleFile.exists() )
+                {
+                    getLog().debug( "Add rules file: " + rulesDirectory + File.separator + rules[i] );
+                }
+                else
+                {
+                    getLog().debug( "Preparing ruleset: " + set );
+                    ruleFile = locator.getResourceAsFile( set, getLocationTemp( set ) );
+
+                    if ( null == ruleFile )
+                    {
+                        throw new MojoExecutionException( "Could not resolve " + set );
+                    }
+                }
+                macker.addRulesFile( ruleFile );
+            }
+        }
+        catch ( ResourceNotFoundException e )
+        {
+            throw new MojoExecutionException( e.getMessage(), e );
+        }
+        catch ( FileResourceCreationException e )
         {
-            getLog().debug( "Add rules file: " + rulesDirectory + File.separator + rules[i] );
-            ruleFile = new File( rulesDirectory, rules[i] );
-            macker.addRulesFile( ruleFile );
+            throw new MojoExecutionException( e.getMessage(), e );
         }
     }
 
     /**
+     * Convenience method to get the location of the specified file name.
+     *
+     * @param name the name of the file whose location is to be resolved
+     * @return a String that contains the absolute file name of the file
+     */
+    private String getLocationTemp( String name )
+    {
+        String loc = name;
+        if ( loc.indexOf( '/' ) != -1 )
+        {
+            loc = loc.substring( loc.lastIndexOf( '/' ) + 1 );
+        }
+        if ( loc.indexOf( '\\' ) != -1 )
+        {
+            loc = loc.substring( loc.lastIndexOf( '\\' ) + 1 );
+        }
+        getLog().debug( "Before: " + name + " After: " + loc );
+        return loc;
+    }
+
+    /**
      * Prepares Macker for the analysis.
-     * 
+     *
      * @param outputFile the result file that will should produced by Macker
      * @return the new instance of Macker
      */
@@ -304,11 +455,87 @@
 
     /**
      * Returns the MavenProject object.
-     * 
+     *
      * @return MavenProject
      */
     public MavenProject getProject()
     {
-        return this.project;
+        return project;
+    }
+
+    /**
+     * Convenience method to get the list of files where the PMD tool will be executed
+     *
+     * @return a List of the files where the MACKER tool will be executed
+     * @throws IOException if there's a problem scanning the directories
+     */
+    private List/*<File>*/ getFilesToProcess()
+        throws IOException
+    {
+        List/*<File>*/ directories = new ArrayList/*<File>*/();
+        directories.add( classesDirectory );
+        if ( includeTests )
+        {
+            directories.add( testClassesDirectory );
+        }
+
+        String excluding = getExcludes();
+        getLog().debug( "Exclusions: " + excluding );
+        String including = getIncludes();
+        getLog().debug( "Inclusions: " + including );
+
+        List/*<File>*/ files = new LinkedList/*<File>*/();
+
+        for ( Iterator/*<File>*/ i = directories.iterator(); i.hasNext(); )
+        {
+            File sourceDirectory = (File) i.next();
+            if ( sourceDirectory.isDirectory() )
+            {
+                List/*<File>*/ newfiles = FileUtils.getFiles( sourceDirectory, including, excluding );
+                files.addAll( newfiles );
+            }
+        }
+
+        return files;
+    }
+
+    /**
+     * Gets the comma separated list of effective include patterns.
+     *
+     * @return The comma separated list of effective include patterns, never <code>null</code>.
+     */
+    private String getIncludes()
+    {
+        Collection/*<String>*/ patterns = new LinkedHashSet/*<String>*/();
+        if ( includes != null )
+        {
+            patterns.addAll( Arrays.asList( includes ) );
+        }
+        if ( patterns.isEmpty() )
+        {
+            patterns.add( "**/*.class" );
+        }
+        return StringUtils.join( patterns.iterator(), "," );
     }
+
+    /**
+     * Gets the comma separated list of effective exclude patterns.
+     *
+     * @return The comma separated list of effective exclude patterns, never <code>null</code>.
+     */
+    private String getExcludes()
+    {
+        Collection/*<String>*/ patterns = new LinkedHashSet/*<String>*/( FileUtils.getDefaultExcludesAsList() );
+        if ( excludes != null )
+        {
+            patterns.addAll( Arrays.asList( excludes ) );
+        }
+        return StringUtils.join( patterns.iterator(), "," );
+    }
+
+    public void setRules( String[] ruleSets )
+    {
+        rules = ruleSets;
+    }
+
 }
Index: src/site/apt/usage.apt
===================================================================
--- src/site/apt/usage.apt	(revision 12166)
+++ src/site/apt/usage.apt	(working copy)
@@ -61,12 +61,21 @@
         <maxmsg>0</maxmsg>
         <print>error|warning|info|debug</print>
         <anger>error|warning|info|debug</anger>
+        <classesDirectory>target/classes</classesDirectory>
+        <testClassesDirectory>target/test-classes</testClassesDirectory>
+        <rulesDirectory>src/main/config</rulesDirectory>
         <rule>macker-rules.xml</rule>
         <verbose>true|false</verbose>
+        <failOnError>true|false</failOnError>
+        <includeTests>true|false</includeTests>
         <variables>
           <key1>value1</key1>
           [...]
         </variables>
+        <excludes>
+          <exclude>**/*Bean.class</exclude>
+          <exclude>**/generated/*.class</exclude>
+        </excludes>
       </configuration>
       <executions>
         <execution>
@@ -81,6 +90,31 @@
 </build>
 -------------------
  
+*Using Rules
+
+ The Macker plugin supports more than one rule set. The rule sets may reside in the classpath, filesystem or at a URL. For rule sets that are bundled with the plugin, you do not need to specificy the absolute path of the file. It will be resolved by the plugin. But if the rule set is a custom rule set, you need to specify its absolute path. 
+
+-------------------
+<build>
+  <plugin>
+    <groupId>org.codehaus.mojo</groupId>
+      <artifactId>macker-maven-plugin</artifactId>
+      <configuration>
+        [...]
+        <rules>
+          <!-- A rule sets that is in the classpath -->
+          <rule>/rules/architecture.xml</rule>
+          <!-- Custom local file system rule set -->
+          <rule>d:\rules\layers.xml</rule>
+          <!-- Custom remote rule set accessed via a URL -->
+          <rule>http://localhost/design.xml</rule>
+        </rules>
+      </configuration>
+      </executions>
+  </plugin>
+</build>
+-------------------
+ 
 *Known Issues and Limitations
  
  As with similar plugins (Findbugs etc), when running Macker on a project, the default heap size might not be enough to complete the build. For now there is no way to fork Macker and run with it's own memory requirements, but the following system variable will allow you to do so for Maven:
Index: src/site/fml/faq.fml
===================================================================
--- src/site/fml/faq.fml	(revision 12166)
+++ src/site/fml/faq.fml	(working copy)
@@ -42,9 +42,20 @@
      <question>Can I run Macker on my test classes?</question>
      <answer>
        <p>
-         No, Macker is not designed for that purpose.
+         Yes, set the <code>includeTests</code> parameter to <code>true</code>.
        </p>
      </answer>
    </faq>
+   <faq id="skip">
+     <question>
+        Is there any way to skip the Macker check temporarily?
+     </question>
+     <answer>
+        <p>
+          Yes, it supports a skip parameter which you can pass on the
+          command line, <code>-Dmacker.skip=true</code>.
+        </p>
+    </answer>
+   </faq>
  </part>
 </faqs>
\ No newline at end of file
Index: src/test/java/org/codehaus/mojo/macker/MackerMojoTest.java
===================================================================
--- src/test/java/org/codehaus/mojo/macker/MackerMojoTest.java	(revision 0)
+++ src/test/java/org/codehaus/mojo/macker/MackerMojoTest.java	(revision 0)
@@ -0,0 +1,218 @@
+package org.codehaus.mojo.macker;
+
+import org.apache.maven.plugin.MojoFailureException;
+import org.apache.maven.plugin.testing.AbstractMojoTestCase;
+
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
+import java.net.URL;
+import java.util.List;
+
+import org.codehaus.plexus.util.FileUtils;
+import org.custommonkey.xmlunit.DetailedDiff;
+import org.custommonkey.xmlunit.Diff;
+import org.custommonkey.xmlunit.Difference;
+import org.xml.sax.SAXException;
+
+public class MackerMojoTest extends AbstractMojoTestCase
+{
+    private static final String TEST_PROJECT = "target/test/unit";
+    private static final String TEST_TARGET = TEST_PROJECT + "/target/";
+    private static final String TEST_POM_LOCATION = "src/test/resources/unit/";
+    private static final String DEFAULT_DATE = "Sun Apr 25 01:23:20 CEST 2010";
+
+    protected void setUp() throws Exception
+    {
+        super.setUp();
+
+        File testTarget = new File( getBasedir(), TEST_TARGET );
+        FileUtils.deleteDirectory( testTarget );
+        testTarget.mkdirs();
+
+        final String examplesPath = "org/codehaus/mojo/macker/example";
+        File examplesTarget = new File( testTarget, "classes/" + examplesPath );
+        examplesTarget.mkdirs();
+        FileUtils.copyDirectory( new File( getBasedir(), "target/test-classes/" + examplesPath ), examplesTarget );
+
+        final String testClassesPath = "org/codehaus/mojo/macker/testclasses";
+        File testClassesTarget = new File( testTarget, "test-classes/" + testClassesPath );
+        testClassesTarget.mkdirs();
+        FileUtils.copyDirectory( new File( getBasedir(), "target/test-classes/" + testClassesPath ), testClassesTarget );
+    }
+
+    private File copyPom( String source ) throws IOException
+    {
+        final File testPom = new File( getBasedir(), TEST_PROJECT + "/pom.xml" );
+        FileUtils.copyFile( new File( getBasedir(), TEST_POM_LOCATION + source ), testPom );
+        return testPom;
+    }
+
+    public void testDefaultConfiguration() throws Exception
+    {
+        // POM configures a ruleset that does not fail on the given classes
+        File testPom = copyPom( "default-configuration-plugin-config.xml" );
+        MackerMojo mojo = (MackerMojo) lookupMojo( "macker", testPom );
+        assertNotNull( mojo );
+        mojo.execute();
+
+        //check if the output files were generated
+        File generatedFile = new File( getBasedir(), TEST_TARGET + "macker-out.xml" );
+        assertTrue( "macker-out.xml was not created", FileUtils.fileExists( generatedFile.getAbsolutePath() ) );
+        assertTrue( "macker-out.xml is empty", generatedFile.length() > 0 );
+    }
+
+    public void testNotFailOnViolation() throws Exception
+    {
+        // POM configures a ruleset that fails on the given classes
+        // but failOnError is false
+        File testPom = copyPom( "notfailonviolation-plugin-config.xml" );
+        MackerMojo mojo = (MackerMojo) lookupMojo( "macker", testPom );
+        mojo.execute();
+
+        // assert XML "macker-out.xml"
+        File generatedFile = new File( getBasedir(), TEST_TARGET + "macker-out.xml" );
+        assertTrue( "macker-out was not created", FileUtils.fileExists( generatedFile.getAbsolutePath() ) );
+        assertOutput( "violation-configuration/macker-out.xml", generatedFile );
+    }
+
+    private void assertOutput( String controlFile, File generatedFile ) throws SAXException, IOException
+    {
+        Diff xmlDiff = new Diff( new FileReader( TEST_POM_LOCATION + controlFile ), new FileReader( generatedFile ) );
+        DetailedDiff detailedDiff = new DetailedDiff( xmlDiff );
+        List/*<Difference>*/differences = detailedDiff.getAllDifferences();
+        assertEquals( 1, differences.size() );
+        Difference diff = (Difference) differences.get( 0 ); // timestamp
+        assertEquals( DEFAULT_DATE, diff.getControlNodeDetail().getValue() );
+    }
+
+    public void testFailOnViolation() throws Exception
+    {
+        // POM configures a ruleset that fails on the given classes
+        File testPom = copyPom( "failonviolation-plugin-config.xml" );
+        MackerMojo mojo = (MackerMojo) lookupMojo( "macker", testPom );
+        try
+        {
+            mojo.execute();
+            fail( "MojoFailureException should be thrown." );
+        }
+        catch ( MojoFailureException e )
+        {
+            // assert XML "macker-out.xml"
+            File generatedFile = new File( getBasedir(), TEST_TARGET + "macker-out.xml" );
+            assertTrue( "macker-out was not created", FileUtils.fileExists( generatedFile.getAbsolutePath() ) );
+            assertOutput( "violation-configuration/macker-out.xml", generatedFile );
+        }
+    }
+
+    public void testSkipped() throws Exception
+    {
+        // POM configures a ruleset that fails on the given classes
+        // but the whole check is skipped
+        File testPom = copyPom( "skip-plugin-config.xml" );
+        MackerMojo mojo = (MackerMojo) lookupMojo( "macker", testPom );
+        mojo.execute();
+
+        // would fail, but did not because it's skipped
+        File generatedFile = new File( getBasedir(), TEST_TARGET + "macker-out.xml" );
+        assertFalse( generatedFile.exists() );
+    }
+
+    public void testIgnoreTestClasses() throws Exception
+    {
+        // POM configures a ruleset that fails on the given test classes
+        // bit the test classes are not configured
+        File testPom = copyPom( "notfailontestclasses-plugin-config.xml" );
+        MackerMojo mojo = (MackerMojo) lookupMojo( "macker", testPom );
+        mojo.execute();
+
+        //check if the output files were generated
+        File generatedFile = new File( getBasedir(), TEST_TARGET + "macker-out.xml" );
+        assertTrue( "macker-out.xml was not created", FileUtils.fileExists( generatedFile.getAbsolutePath() ) );
+    }
+
+    public void testFailInTestClasses() throws Exception
+    {
+        // POM configures a ruleset that fails on the given test classes
+        File testPom = copyPom( "failontestclasses-plugin-config.xml" );
+        MackerMojo mojo = (MackerMojo) lookupMojo( "macker", testPom );
+        try
+        {
+            mojo.execute();
+            fail( "MojoFailureException should be thrown." );
+        }
+        catch ( MojoFailureException e )
+        {
+            File generatedFile = new File( getBasedir(), TEST_TARGET + "macker-out.xml" );
+            assertTrue( "macker-out was not created", FileUtils.fileExists( generatedFile.getAbsolutePath() ) );
+            assertOutput( "testclasses-configuration/macker-out.xml", generatedFile );
+        }
+    }
+
+    public void testMultipleRules() throws Exception
+    {
+        // POM configures two rulesets that each fail on the given classes
+        File testPom = copyPom( "tworule-configuration-plugin-config.xml" );
+        MackerMojo mojo = (MackerMojo) lookupMojo( "macker", testPom );
+        try
+        {
+            mojo.execute();
+            fail( "MojoFailureException should be thrown." );
+        }
+        catch ( MojoFailureException e )
+        {
+            // assert XML "macker-out.xml"
+            File generatedFile = new File( getBasedir(), TEST_TARGET + "macker-out.xml" );
+            assertTrue( "macker-out was not created", FileUtils.fileExists( generatedFile.getAbsolutePath() ) );
+            assertOutput( "double-configuration/macker-out.xml", generatedFile );
+        }
+    }
+
+    public void testExcludes() throws Exception
+    {
+        // POM configures a ruleset that fails on the given classes
+        // but the offending class is excluded
+        File testPom = copyPom( "excludefailonviolation-plugin-config.xml" );
+        MackerMojo mojo = (MackerMojo) lookupMojo( "macker", testPom );
+        mojo.execute();
+
+        //check if the output files were generated
+        File generatedFile = new File( getBasedir(), TEST_TARGET + "macker-out.xml" );
+        assertTrue( "macker-out.xml was not created", FileUtils.fileExists( generatedFile.getAbsolutePath() ) );
+    }
+
+    public void testFileURL() throws Exception
+    {
+        // POM configures a ruleset that fails on the given classes
+        File testPom = copyPom( "norule-configuration-plugin-config.xml" );
+        MackerMojo mojo = (MackerMojo) lookupMojo( "macker", testPom );
+        URL url = getClass().getClassLoader().getResource( "unit/default-configuration/macker-rules.xml" );
+        mojo.setRules( new String[] { url.toString() } );
+        mojo.execute();
+
+        //check if the output files were generated
+        File generatedFile = new File( getBasedir(), TEST_TARGET + "macker-out.xml" );
+        assertTrue( "macker-out.xml was not created", FileUtils.fileExists( generatedFile.getAbsolutePath() ) );
+    }
+
+    public void testClasspathRules() throws Exception
+    {
+        // POM configures a rulesets from classpath that fails on the given classes
+        File testPom = copyPom( "classpath-configuration-plugin-config.xml" );
+        MackerMojo mojo = (MackerMojo) lookupMojo( "macker", testPom );
+        try
+        {
+            mojo.execute();
+            fail( "MojoFailureException should be thrown." );
+        }
+        catch ( MojoFailureException e )
+        {
+            // assert XML "macker-out.xml"
+            File generatedFile = new File( getBasedir(), TEST_TARGET + "macker-out.xml" );
+            assertTrue( "macker-out was not created", FileUtils.fileExists( generatedFile.getAbsolutePath() ) );
+            assertOutput( "violation-configuration/macker-out.xml", generatedFile );
+        }
+    }
+
+
+}
Index: src/test/java/org/codehaus/mojo/macker/example/ForbiddenReference.java
===================================================================
--- src/test/java/org/codehaus/mojo/macker/example/ForbiddenReference.java	(revision 0)
+++ src/test/java/org/codehaus/mojo/macker/example/ForbiddenReference.java	(revision 0)
@@ -0,0 +1,11 @@
+package org.codehaus.mojo.macker.example;
+
+import java.security.InvalidParameterException;
+
+public class ForbiddenReference
+{
+    public void calculate() throws InvalidParameterException
+    {
+        throw new InvalidParameterException( "what a bad guy" );
+    }
+}
Index: src/test/java/org/codehaus/mojo/macker/example/WithoutReferences.java
===================================================================
--- src/test/java/org/codehaus/mojo/macker/example/WithoutReferences.java	(revision 0)
+++ src/test/java/org/codehaus/mojo/macker/example/WithoutReferences.java	(revision 0)
@@ -0,0 +1,6 @@
+package org.codehaus.mojo.macker.example;
+
+public class WithoutReferences
+{
+
+}
Index: src/test/java/org/codehaus/mojo/macker/stubs/ProjectStub.java
===================================================================
--- src/test/java/org/codehaus/mojo/macker/stubs/ProjectStub.java	(revision 0)
+++ src/test/java/org/codehaus/mojo/macker/stubs/ProjectStub.java	(revision 0)
@@ -0,0 +1,34 @@
+package org.codehaus.mojo.macker.stubs;
+
+import org.apache.maven.model.Build;
+import org.apache.maven.plugin.testing.stubs.MavenProjectStub;
+
+import java.io.File;
+
+public class ProjectStub extends MavenProjectStub
+{
+    private static final String TEST_PROJECT = "target/test/unit";
+    private static final String TEST_TARGET = TEST_PROJECT + "/target/";
+
+    private Build buildStub;
+
+    public ProjectStub()
+    {
+        setFile( new File( getBasedir(), TEST_PROJECT + "/pom.xml" ) );
+
+        Build build = new Build();
+        build.setDirectory( getBasedir() + "/" + TEST_TARGET );
+        setBuild( build );
+    }
+
+    public Build getBuild()
+    {
+        return buildStub;
+    }
+
+    public void setBuild( Build build )
+    {
+        buildStub = build;
+    }
+
+}
Index: src/test/java/org/codehaus/mojo/macker/testclasses/BadDatabaseClass.java
===================================================================
--- src/test/java/org/codehaus/mojo/macker/testclasses/BadDatabaseClass.java	(revision 0)
+++ src/test/java/org/codehaus/mojo/macker/testclasses/BadDatabaseClass.java	(revision 0)
@@ -0,0 +1,12 @@
+package org.codehaus.mojo.macker.testclasses;
+
+import java.sql.SQLException;
+
+public class BadDatabaseClass
+{
+
+    public void workOnDatabase() throws SQLException
+    {
+        throw new SQLException( "dummy" );
+    }
+}
Index: src/test/resources/unit/classpath-configuration-plugin-config.xml
===================================================================
--- src/test/resources/unit/classpath-configuration-plugin-config.xml	(revision 0)
+++ src/test/resources/unit/classpath-configuration-plugin-config.xml	(revision 0)
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>def.configuration</groupId>
+  <artifactId>default-configuration</artifactId>
+  <packaging>jar</packaging>
+  <version>1.0-SNAPSHOT</version>
+  <name>Maven Macker Plugin Test</name>
+
+  <build>
+    <finalName>default-configuration</finalName>
+    <plugins>
+      <plugin>
+        <groupId>org.codehaus.mojo</groupId>
+        <artifactId>macker-maven-plugin</artifactId>
+        <configuration>
+          <project implementation="org.codehaus.mojo.macker.stubs.ProjectStub" />
+          <classesDirectory>target/test/unit/target/classes</classesDirectory>
+          <testClassesDirectory>target/test/unit/target/test-classes</testClassesDirectory>
+          <outputDirectory>target/test/unit/target</outputDirectory>
+          <outputName>macker-out.xml</outputName>
+          <failOnError>true</failOnError>
+          <includeTests>true</includeTests>
+          <rules>
+            <rule>unit/violation-configuration/macker-rules-violations.xml</rule>
+          </rules>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+
+</project>
Index: src/test/resources/unit/default-configuration-plugin-config.xml
===================================================================
--- src/test/resources/unit/default-configuration-plugin-config.xml	(revision 0)
+++ src/test/resources/unit/default-configuration-plugin-config.xml	(revision 0)
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>def.configuration</groupId>
+  <artifactId>default-configuration</artifactId>
+  <packaging>jar</packaging>
+  <version>1.0-SNAPSHOT</version>
+  <name>Maven Macker Plugin Test</name>
+
+  <build>
+    <finalName>default-configuration</finalName>
+    <plugins>
+      <plugin>
+        <groupId>org.codehaus.mojo</groupId>
+        <artifactId>macker-maven-plugin</artifactId>
+        <configuration>
+          <project implementation="org.codehaus.mojo.macker.stubs.ProjectStub" />
+          <classesDirectory>target/test/unit/target/classes</classesDirectory><!-- ${project.build.outputDirectory} -->
+          <rulesDirectory>src/test/resources/unit/default-configuration</rulesDirectory><!-- ${basedir}/src/main/config -->
+          <outputDirectory>target/test/unit/target</outputDirectory><!-- ${project.build.directory} -->
+          <outputName>macker-out.xml</outputName>
+          <maxmsg>0</maxmsg>
+          <rule>macker-rules.xml</rule>
+          <verbose>false</verbose>
+          <failOnError>true</failOnError>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+
+</project>
Index: src/test/resources/unit/excludefailonviolation-plugin-config.xml
===================================================================
--- src/test/resources/unit/excludefailonviolation-plugin-config.xml	(revision 0)
+++ src/test/resources/unit/excludefailonviolation-plugin-config.xml	(revision 0)
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>def.configuration</groupId>
+  <artifactId>default-configuration</artifactId>
+  <packaging>jar</packaging>
+  <version>1.0-SNAPSHOT</version>
+  <name>Maven Macker Plugin Test</name>
+
+  <build>
+    <finalName>default-configuration</finalName>
+    <plugins>
+      <plugin>
+        <groupId>org.codehaus.mojo</groupId>
+        <artifactId>macker-maven-plugin</artifactId>
+        <configuration>
+          <project implementation="org.codehaus.mojo.macker.stubs.ProjectStub" />
+          <classesDirectory>target/test/unit/target/classes</classesDirectory>
+          <rulesDirectory>src/test/resources/unit/violation-configuration</rulesDirectory>
+          <outputDirectory>target/test/unit/target</outputDirectory>
+          <outputName>macker-out.xml</outputName>
+          <rule>macker-rules-violations.xml</rule>
+          <excludes>
+            <exclude>**/*ForbiddenReference.class</exclude>
+          </excludes>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+
+</project>
Index: src/test/resources/unit/failontestclasses-plugin-config.xml
===================================================================
--- src/test/resources/unit/failontestclasses-plugin-config.xml	(revision 0)
+++ src/test/resources/unit/failontestclasses-plugin-config.xml	(revision 0)
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>def.configuration</groupId>
+  <artifactId>default-configuration</artifactId>
+  <packaging>jar</packaging>
+  <version>1.0-SNAPSHOT</version>
+  <name>Maven Macker Plugin Test</name>
+
+  <build>
+    <finalName>testclasses-configuration</finalName>
+    <plugins>
+      <plugin>
+        <groupId>org.codehaus.mojo</groupId>
+        <artifactId>macker-maven-plugin</artifactId>
+        <configuration>
+          <project implementation="org.codehaus.mojo.macker.stubs.ProjectStub" />
+          <classesDirectory>target/test/unit/target/classes</classesDirectory>
+          <testClassesDirectory>target/test/unit/target/test-classes</testClassesDirectory>
+          <rulesDirectory>src/test/resources/unit/testclasses-configuration</rulesDirectory>
+          <outputDirectory>target/test/unit/target</outputDirectory>
+          <outputName>macker-out.xml</outputName>
+          <rule>macker-rules-testclasses.xml</rule>
+          <failOnError>true</failOnError>
+          <includeTests>true</includeTests>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+
+</project>
Index: src/test/resources/unit/failonviolation-plugin-config.xml
===================================================================
--- src/test/resources/unit/failonviolation-plugin-config.xml	(revision 0)
+++ src/test/resources/unit/failonviolation-plugin-config.xml	(revision 0)
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>def.configuration</groupId>
+  <artifactId>default-configuration</artifactId>
+  <packaging>jar</packaging>
+  <version>1.0-SNAPSHOT</version>
+  <name>Maven Macker Plugin Test</name>
+
+  <build>
+    <finalName>violation-configuration</finalName>
+    <plugins>
+      <plugin>
+        <groupId>org.codehaus.mojo</groupId>
+        <artifactId>macker-maven-plugin</artifactId>
+        <configuration>
+          <project implementation="org.codehaus.mojo.macker.stubs.ProjectStub" />
+          <classesDirectory>target/test/unit/target/classes</classesDirectory>
+          <rulesDirectory>src/test/resources/unit/violation-configuration</rulesDirectory>
+          <outputDirectory>target/test/unit/target</outputDirectory>
+          <outputName>macker-out.xml</outputName>
+          <rule>macker-rules-violations.xml</rule>
+          <failOnError>true</failOnError>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+
+</project>
Index: src/test/resources/unit/norule-configuration-plugin-config.xml
===================================================================
--- src/test/resources/unit/norule-configuration-plugin-config.xml	(revision 0)
+++ src/test/resources/unit/norule-configuration-plugin-config.xml	(revision 0)
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>def.configuration</groupId>
+  <artifactId>default-configuration</artifactId>
+  <packaging>jar</packaging>
+  <version>1.0-SNAPSHOT</version>
+  <name>Maven Macker Plugin Test</name>
+
+  <build>
+    <finalName>default-configuration</finalName>
+    <plugins>
+      <plugin>
+        <groupId>org.codehaus.mojo</groupId>
+        <artifactId>macker-maven-plugin</artifactId>
+        <configuration>
+          <project implementation="org.codehaus.mojo.macker.stubs.ProjectStub" />
+          <classesDirectory>target/test/unit/target/classes</classesDirectory>
+          <rulesDirectory>src/test/resources/unit</rulesDirectory>
+          <outputDirectory>target/test/unit/target</outputDirectory>
+          <outputName>macker-out.xml</outputName>
+          <failOnError>true</failOnError>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+
+</project>
Index: src/test/resources/unit/notfailontestclasses-plugin-config.xml
===================================================================
--- src/test/resources/unit/notfailontestclasses-plugin-config.xml	(revision 0)
+++ src/test/resources/unit/notfailontestclasses-plugin-config.xml	(revision 0)
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>def.configuration</groupId>
+  <artifactId>default-configuration</artifactId>
+  <packaging>jar</packaging>
+  <version>1.0-SNAPSHOT</version>
+  <name>Maven Macker Plugin Test</name>
+
+  <build>
+    <finalName>testclasses-configuration</finalName>
+    <plugins>
+      <plugin>
+        <groupId>org.codehaus.mojo</groupId>
+        <artifactId>macker-maven-plugin</artifactId>
+        <configuration>
+          <project implementation="org.codehaus.mojo.macker.stubs.ProjectStub" />
+          <classesDirectory>target/test/unit/target/classes</classesDirectory>
+          <testClassesDirectory>target/test/unit/target/test-classes</testClassesDirectory>
+          <rulesDirectory>src/test/resources/unit/testclasses-configuration</rulesDirectory>
+          <outputDirectory>target/test/unit/target</outputDirectory>
+          <outputName>macker-out.xml</outputName>
+          <rule>macker-rules-testclasses.xml</rule>
+          <failOnError>true</failOnError>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+
+</project>
Index: src/test/resources/unit/notfailonviolation-plugin-config.xml
===================================================================
--- src/test/resources/unit/notfailonviolation-plugin-config.xml	(revision 0)
+++ src/test/resources/unit/notfailonviolation-plugin-config.xml	(revision 0)
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>def.configuration</groupId>
+  <artifactId>default-configuration</artifactId>
+  <packaging>jar</packaging>
+  <version>1.0-SNAPSHOT</version>
+  <name>Maven Macker Plugin Test</name>
+
+  <build>
+    <finalName>violation-configuration</finalName>
+    <plugins>
+      <plugin>
+        <groupId>org.codehaus.mojo</groupId>
+        <artifactId>macker-maven-plugin</artifactId>
+        <configuration>
+          <project implementation="org.codehaus.mojo.macker.stubs.ProjectStub" />
+          <classesDirectory>target/test/unit/target/classes</classesDirectory>
+          <rulesDirectory>src/test/resources/unit/violation-configuration</rulesDirectory>
+          <outputDirectory>target/test/unit/target</outputDirectory>
+          <outputName>macker-out.xml</outputName>
+          <rule>macker-rules-violations.xml</rule>
+          <failOnError>false</failOnError>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+
+</project>
Index: src/test/resources/unit/skip-plugin-config.xml
===================================================================
--- src/test/resources/unit/skip-plugin-config.xml	(revision 0)
+++ src/test/resources/unit/skip-plugin-config.xml	(revision 0)
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>def.configuration</groupId>
+  <artifactId>default-configuration</artifactId>
+  <packaging>jar</packaging>
+  <version>1.0-SNAPSHOT</version>
+  <name>Maven Macker Plugin Test</name>
+
+  <build>
+    <finalName>violation-configuration</finalName>
+    <plugins>
+      <plugin>
+        <groupId>org.codehaus.mojo</groupId>
+        <artifactId>macker-maven-plugin</artifactId>
+        <configuration>
+          <project implementation="org.codehaus.mojo.macker.stubs.ProjectStub" />
+          <classesDirectory>target/test/unit/target/classes</classesDirectory>
+          <rulesDirectory>src/test/resources/unit/violation-configuration</rulesDirectory>
+          <outputDirectory>target/test/unit/target</outputDirectory>
+          <outputName>macker-out.xml</outputName>
+          <rule>macker-rules-violations.xml</rule>
+          <failOnError>true</failOnError>
+          <skip>true</skip>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+
+</project>
Index: src/test/resources/unit/tworule-configuration-plugin-config.xml
===================================================================
--- src/test/resources/unit/tworule-configuration-plugin-config.xml	(revision 0)
+++ src/test/resources/unit/tworule-configuration-plugin-config.xml	(revision 0)
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+
+  <modelVersion>4.0.0</modelVersion>
+  <groupId>def.configuration</groupId>
+  <artifactId>default-configuration</artifactId>
+  <packaging>jar</packaging>
+  <version>1.0-SNAPSHOT</version>
+  <name>Maven Macker Plugin Test</name>
+
+  <build>
+    <finalName>default-configuration</finalName>
+    <plugins>
+      <plugin>
+        <groupId>org.codehaus.mojo</groupId>
+        <artifactId>macker-maven-plugin</artifactId>
+        <configuration>
+          <project implementation="org.codehaus.mojo.macker.stubs.ProjectStub" />
+          <classesDirectory>target/test/unit/target/classes</classesDirectory>
+          <testClassesDirectory>target/test/unit/target/test-classes</testClassesDirectory>
+          <rulesDirectory>src/test/resources/unit</rulesDirectory>
+          <outputDirectory>target/test/unit/target</outputDirectory>
+          <outputName>macker-out.xml</outputName>
+          <failOnError>true</failOnError>
+          <includeTests>true</includeTests>
+          <rules>
+            <rule>violation-configuration/macker-rules-violations.xml</rule>
+            <rule>testclasses-configuration/macker-rules-testclasses.xml</rule>
+          </rules>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
+
+</project>
Index: src/test/resources/unit/default-configuration/macker-rules.xml
===================================================================
--- src/test/resources/unit/default-configuration/macker-rules.xml	(revision 0)
+++ src/test/resources/unit/default-configuration/macker-rules.xml	(revision 0)
@@ -0,0 +1,17 @@
+<?xml version="1.0"?>
+
+<macker>
+
+  <ruleset name="default rules">
+
+    <access-rule>
+      <message>JD xml classes must not be used directly (only indirectly by XLST).</message>
+      <deny>
+        <from class="org.codehaus.mojo.macker.example.**" />
+        <to class="jd.**" />
+      </deny>
+    </access-rule>
+
+  </ruleset>
+
+</macker>
Index: src/test/resources/unit/double-configuration/macker-out.xml
===================================================================
--- src/test/resources/unit/double-configuration/macker-out.xml	(revision 0)
+++ src/test/resources/unit/double-configuration/macker-out.xml	(revision 0)
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<macker-report>
+    <timestamp>Sun Apr 25 01:23:20 CEST 2010</timestamp>
+    <ruleset name="failing rules">
+        <access-rule-violation severity="error">
+            <message>java.security classes must only be used inside util.crypt packages.</message>
+            <from>
+                <full-name>org.codehaus.mojo.macker.example.ForbiddenReference</full-name>
+                <class>ForbiddenReference</class>
+                <package>org.codehaus.mojo.macker.example</package>
+            </from>
+            <to>
+                <full-name>java.security.InvalidParameterException</full-name>
+                <class>InvalidParameterException</class>
+                <package>java.security</package>
+            </to>
+        </access-rule-violation>
+    </ruleset>
+    <ruleset name="unit test rules">
+        <access-rule-violation severity="error">
+            <message>java.sql is so old school, use JPA.</message>
+            <from>
+                <full-name>org.codehaus.mojo.macker.testclasses.BadDatabaseClass</full-name>
+                <class>BadDatabaseClass</class>
+                <package>org.codehaus.mojo.macker.testclasses</package>
+            </from>
+            <to>
+                <full-name>java.sql.SQLException</full-name>
+                <class>SQLException</class>
+                <package>java.sql</package>
+            </to>
+        </access-rule-violation>
+    </ruleset>
+</macker-report>
+
Index: src/test/resources/unit/testclasses-configuration/macker-out.xml
===================================================================
--- src/test/resources/unit/testclasses-configuration/macker-out.xml	(revision 0)
+++ src/test/resources/unit/testclasses-configuration/macker-out.xml	(revision 0)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<macker-report>
+    <timestamp>Sun Apr 25 01:23:20 CEST 2010</timestamp>
+    <ruleset name="unit test rules">
+        <access-rule-violation severity="error">
+            <message>java.sql is so old school, use JPA.</message>
+            <from>
+                <full-name>org.codehaus.mojo.macker.testclasses.BadDatabaseClass</full-name>
+                <class>BadDatabaseClass</class>
+                <package>org.codehaus.mojo.macker.testclasses</package>
+            </from>
+            <to>
+                <full-name>java.sql.SQLException</full-name>
+                <class>SQLException</class>
+                <package>java.sql</package>
+            </to>
+        </access-rule-violation>
+    </ruleset>
+</macker-report>
+
Index: src/test/resources/unit/testclasses-configuration/macker-rules-testclasses.xml
===================================================================
--- src/test/resources/unit/testclasses-configuration/macker-rules-testclasses.xml	(revision 0)
+++ src/test/resources/unit/testclasses-configuration/macker-rules-testclasses.xml	(revision 0)
@@ -0,0 +1,31 @@
+<?xml version="1.0"?>
+
+<macker>
+
+  <ruleset name="unit test rules">
+
+    <var name="base" value="org.codehaus.mojo.macker" />
+    <pattern name="example" class="${base}.example.**" />
+    <pattern name="testclasses" class="${base}.testclasses.**" />
+
+    <access-rule>
+      <message>JD xml classes must not be used directly (only indirectly by XLST).</message>
+      <deny>
+        <from pattern="example" />
+        <to class="jd.**" />
+      </deny>
+    </access-rule>
+
+    <access-rule>
+      <message>java.sql is so old school, use JPA.</message>
+      <deny>
+        <from pattern="testclasses" />
+        <to>
+          <include class="java.sql.**" />
+        </to>
+      </deny>
+    </access-rule>
+
+  </ruleset>
+
+</macker>
Index: src/test/resources/unit/violation-configuration/macker-out.xml
===================================================================
--- src/test/resources/unit/violation-configuration/macker-out.xml	(revision 0)
+++ src/test/resources/unit/violation-configuration/macker-out.xml	(revision 0)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<macker-report>
+    <timestamp>Sun Apr 25 01:23:20 CEST 2010</timestamp>
+    <ruleset name="failing rules">
+        <access-rule-violation severity="error">
+            <message>java.security classes must only be used inside util.crypt packages.</message>
+            <from>
+                <full-name>org.codehaus.mojo.macker.example.ForbiddenReference</full-name>
+                <class>ForbiddenReference</class>
+                <package>org.codehaus.mojo.macker.example</package>
+            </from>
+            <to>
+                <full-name>java.security.InvalidParameterException</full-name>
+                <class>InvalidParameterException</class>
+                <package>java.security</package>
+            </to>
+        </access-rule-violation>
+    </ruleset>
+</macker-report>
+
Index: src/test/resources/unit/violation-configuration/macker-rules-violations.xml
===================================================================
--- src/test/resources/unit/violation-configuration/macker-rules-violations.xml	(revision 0)
+++ src/test/resources/unit/violation-configuration/macker-rules-violations.xml	(revision 0)
@@ -0,0 +1,30 @@
+<?xml version="1.0"?>
+
+<macker>
+
+  <ruleset name="failing rules">
+
+    <var name="base" value="org.codehaus.mojo.macker" />
+    <pattern name="example" class="${base}.example.**" />
+
+    <access-rule>
+      <message>JD xml classes must not be used directly (only indirectly by XLST).</message>
+      <deny>
+        <from pattern="example" />
+        <to class="jd.**" />
+      </deny>
+    </access-rule>
+
+    <access-rule>
+      <message>java.security classes must only be used inside util.crypt packages.</message>
+      <deny>
+        <from pattern="example" />
+        <to>
+          <include class="java.security.**" />
+        </to>
+      </deny>
+    </access-rule>
+
+  </ruleset>
+
+</macker>
